깃허브

클론 : 원격 저장소 복제하기

클론된 원격저장소(로컬)에서 커밋을 한 다음에
원격저장소로 푸쉬해야 올라감

클론 푸시 패치 풀

패치는 우너겨ㅑㄱ

풀리퀘스트
기여라려는 저장소를 본인 계저응로 초클하기
ㅓ포츠한 저장소르 클론하기
브랜치 생성 후 생성한 브랜치에서 작업하기
작업하 ㄴ브랜치 푸시학
풀 리쿼ㅔ스트 하기

포크
포크한 저장소를 클론

;=================================================================================================

[[ 깃허브에서 페치와 풀의 차이점 ]]
**깃(Git)**을 사용하여 협업을 할 때 자주 사용하는 명령어인 **페치(fetch)**와 **풀(pull)**은 비슷해 보이지만,
 수행하는 작업에는 차이가 있습니다. 각 명령어의 역할을 자세히 알아보고, 어떤 상황에서 
 어떤 명령어를 사용해야 하는지 살펴보겠습니다.

1. 페치 (fetch)
정의: 원격 저장소의 변경 사항을 로컬 저장소로 가져오는 것입니다.
작업:
원격 저장소의 최신 커밋 정보를 가져옵니다.
로컬 저장소의 브랜치와 원격 브랜치의 연결(tracking)을 업데이트합니다.
하지만, 로컬 작업 디렉토리에는 아무런 변경이 일어나지 않습니다.
사용 시기:
다른 사람이 원격 저장소에 변경 사항을 push 했을 때, 자신의 로컬 저장소를 
최신 상태로 유지하고 싶을 때 사용합니다.
merge 전에 변경 사항을 확인하고 싶을 때 유용합니다.


2. 풀 (pull)
정의: 페치와 병합(merge)을 한 번에 수행하는 명령어입니다.
작업:
페치: 원격 저장소의 변경 사항을 로컬 저장소로 가져옵니다.
병합: 가져온 변경 사항을 현재 작업하고 있는 로컬 브랜치에 병합합니다.
사용 시기:
원격 저장소의 변경 사항을 가져와 바로 작업에 반영하고 싶을 때 사용합니다.
다른 사람의 작업 결과를 자신의 로컬 환경에서 바로 확인하고 싶을 때 유용합니다.


페치와 풀의 차이점 요약
명령어	작업	결과	사용 시기
fetch	원격 저장소의 변경 사항을 로컬 저장소로 가져옴	로컬 저장소의 브랜치 정보만
 업데이트됨	변경 사항을 확인하고 merge 전 pull	fetch + merge	로컬 브랜치에 변경
  사항이 병합됨	변경 사항을 바로 반영하고 싶을 때
  
언제 어떤 명령어를 사용해야 할까요?
안전하게 변경 사항을 확인하고 싶을 때: 먼저 git fetch를 사용하여 변경 사항을 가져온 후,
 충분히 검토하고 git merge를 수행합니다.
변경 사항을 바로 작업에 반영하고 싶을 때: git pull을 사용하여 한 번에 작업을 완료합니다.
주의: git pull은 편리하지만, 충돌이 발생할 수 있습니다. 충돌이 발생하면 수동으로 해결해야
 하므로, 중요한 작업을 하기 전에 미리 백업하는 것이 좋습니다.

결론적으로, 페치와 풀은 깃에서 원격 저장소의 변경 사항을 로컬 저장소로 가져오는 데 사용되는

 명령어지만, 수행하는 작업과 사용 시기에 따라 적절한 명령어를 선택해야 합니다.

; ===========================================================================================

[[ 포크 ]]
기여하려는 저장소를 본인 게정으로 포크하기
일반적으로 여러분이 소유하지 않으 원격 저장소에는 푸시할 수 없음
그렇기에 여러분의 계정으로 원격 저장소를 복제해와야 하는데 
이 과정을 포크라고 함

[[ 클론 ]]
포크한 본인 계정의 저장소를 클론하기
여러분이 소유하지 않은 원격 저장소에 푸시하기는 불가능할지 몰라도
포크한 원격 저장소에 푸시하기는 가능함
포크한 (여러분의 계정으로 복제된) 저장솔르 클론된

[[   ]]
브랜치 생성 후 생성한 브랜치에서 작업하기새로운 브랜치를 생성한 후
해당 브랜치에서 변경 사항을 만드로 커밋

[[   ]]
작업한 브랜치 푸시하기
생성한 브랜치를 푸시
깃허브에 풀 리퀘스트 버튼이 생성

[[   ]]
풀 리퀘스트 보내기
마지막으로 풀 리퀘스트를 보내면 끝


; ============================================================================================
